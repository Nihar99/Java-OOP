package LifeExpectancy;

//import java.awt.List;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import de.fhpotsdam.unfolding.*;
import de.fhpotsdam.unfolding.data.Feature;
import de.fhpotsdam.unfolding.data.GeoJSONReader;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.providers.Google;
import de.fhpotsdam.unfolding.providers.Microsoft;
import de.fhpotsdam.unfolding.providers.OpenStreetMap;
import de.fhpotsdam.unfolding.utils.MapUtils;
import processing.core.PApplet;

public class LifeExpectany extends PApplet {
	UnfoldingMap map;
	Map<String,Float> LifeExpByCountry;
	List<Feature> countries;
	List<Marker> countryMarkers;
	public void setup()
	{
		size(800,600,OPENGL);
		map = new UnfoldingMap(this,50,50,700,500,new OpenStreetMap.OpenStreetMapProvider());
		MapUtils.createDefaultEventDispatcher(this,map);
		LifeExpByCountry = LoadLifeExpectancy("time_series_covid_19_confirmed.csv");
		countries = GeoJSONReader.loadData(this,"countries.geo.json");
		countryMarkers = MapUtils.createSimpleMarkers(countries);
		map.addMarkers(countryMarkers);
		shadeCountries();
	}
	public void draw()
	{
		map.draw();
	}
	private Map<String,Float> LoadLifeExpectancy(String filename)
	{
		Map<String,Float> LifeExpMap = new HashMap<String,Float>();
		String rows[] = loadStrings(filename);
		for(String row : rows) {
			String[] columns = row.split(",");
			if(!columns[5].equals(".."))
			{
				float value = Float.parseFloat(columns[3]);
				LifeExpMap.put(columns[0],value);
			}
		}

		return LifeExpMap;
	}
	private void shadeCountries() {
		for (Marker marker : countryMarkers) {
			// Find data for country of the current marker
			String countryId = marker.getId();
			if (LifeExpByCountry.containsKey(countryId)) {
				float lifeExp = LifeExpByCountry.get(countryId);
				// Encode value as brightness (values range: 40-90)
				int colorLevel = (int) map(lifeExp, 350000, 500, 10, 255);
				marker.setColor(color(255-colorLevel, 100, colorLevel));
			}
			else {
				marker.setColor(color(150,150,150));
			}
		}
	}
}
